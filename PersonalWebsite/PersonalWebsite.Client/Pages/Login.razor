@page "/login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - Alex Morgan</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h2>Admin Login</h2>
                </div>
                <div class="card-body">
                    <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger">
                                @_errorMessage
                            </div>
                        }

                        <div class="form-group">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="_loginModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => _loginModel.Username)" />
                        </div>

                        <div class="form-group">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" @bind-Value="_loginModel.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => _loginModel.Password)" />
                        </div>

                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer">
                    <p class="mb-0">Demo credentials: admin / admin123</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel _loginModel = new LoginModel();
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/admin");
        }
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            var user = await AuthService.LoginAsync(_loginModel.Username, _loginModel.Password);
            
            if (user != null)
            {
                var authStateProvider = (CustomAuthStateProvider)AuthStateProvider;
                authStateProvider.NotifyUserAuthentication(user);
                NavigationManager.NavigateTo("/admin");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Invalid username or password";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}