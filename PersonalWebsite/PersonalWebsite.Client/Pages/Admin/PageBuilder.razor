@page "/admin/page-builder"
@page "/admin/page-builder/{PageId:int}"
@attribute [Authorize]
@layout AdminLayout
@inject PageService PageService
@inject PageComponentService ComponentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Page Builder - Admin Dashboard</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Page Builder</h1>
        <div>
            <button class="btn btn-outline-secondary me-2" @onclick="NavigateBack">Cancel</button>
            <button class="btn btn-primary" @onclick="SavePageAsync" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Page</span>
                }
            </button>
        </div>
    </div>
    
    @if (_loading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading page builder...</p>
        </div>
    }
    else if (_page != null)
    {
        <div class="page-builder">
            <div class="component-sidebar">
                <div class="card mb-3">
                    <div class="card-header">
                        <h5>Page Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label for="title" class="form-label">Page Title</label>
                            <input id="title" @bind="_page.Title" class="form-control" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="slug" class="form-label">Page Slug</label>
                            <div class="input-group">
                                <span class="input-group-text">/page/</span>
                                <input id="slug" @bind="_page.Slug" class="form-control" />
                            </div>
                        </div>
                        
                        <div class="form-group mb-3">
                            <div class="form-check form-switch">
                                <input id="isPublished" @bind="_page.IsPublished" type="checkbox" class="form-check-input" />
                                <label for="isPublished" class="form-check-label">Published</label>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card mb-3">
                    <div class="card-header">
                        <h5>Components</h5>
                    </div>
                    <div class="card-body">
                        <p>Drag components to add them to your page:</p>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("text"))">
                            <h5>Text Block</h5>
                            <p>Add paragraphs, headings, and formatted text.</p>
                        </div>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("image"))">
                            <h5>Image</h5>
                            <p>Add a single image with optional caption.</p>
                        </div>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("gallery"))">
                            <h5>Gallery</h5>
                            <p>Add a collection of images in a grid layout.</p>
                        </div>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("video"))">
                            <h5>Video</h5>
                            <p>Embed a video from YouTube or Vimeo.</p>
                        </div>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("button"))">
                            <h5>Button</h5>
                            <p>Add a call-to-action button.</p>
                        </div>
                        
                        <div class="component-item" draggable="true" @ondragstart="@(() => HandleDragStart("divider"))">
                            <h5>Divider</h5>
                            <p>Add a horizontal divider line.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="page-canvas" 
                 @ondragover:preventDefault
                 @ondrop="HandleDrop">
                <div class="page-header">
                    <h2>@_page.Title</h2>
                    @if (!string.IsNullOrEmpty(_page.Description))
                    {
                        <p class="lead">@_page.Description</p>
                    }
                </div>
                
                <div class="page-components">
                    @if (_page.Components != null && _page.Components.Any())
                    {
                        @foreach (var component in _page.Components.OrderBy(c => c.Order))
                        {
                            <div class="component-wrapper">
                                <div class="component-controls">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => MoveComponentUp(component)">↑</button>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => MoveComponentDown(component)">↓</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveComponent(component)">×</button>
                                </div>
                                <div class="component @component.ComponentType.ToLower()">
                                    @RenderComponent(component)
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <p>Drag components here to build your page.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <p>Error loading page. Please try again.</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? PageId { get; set; }
    
    private Page? _page;
    private bool _loading = true;
    private bool _isSaving = false;
    private string _draggedComponentType = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPageAsync();
    }
    
    private async Task LoadPageAsync()
    {
        try
        {
            _loading = true;
            
            if (PageId.HasValue)
            {
                _page = await PageService.GetPageAsync(PageId.Value);
                
                // Load components
                var components = await ComponentService.GetPageComponentsAsync(PageId.Value);
                _page.Components = components;
            }
            else
            {
                // Create a new page
                _page = new Page
                {
                    Title = "New Page",
                    Slug = "new-page-" + DateTime.Now.Ticks.ToString().Substring(10),
                    Description = "",
                    Content = "",
                    IsPublished = false,
                    ShowInNavigation = true,
                    Order = 0,
                    CreatedAt = DateTime.Now,
                    Components = new List<PageComponent>()
                };
            }
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            _loading = false;
        }
    }
    
    private void HandleDragStart(string componentType)
    {
        _draggedComponentType = componentType;
    }
    
    private void HandleDrop()
    {
        if (string.IsNullOrEmpty(_draggedComponentType) || _page == null)
            return;
            
        var component = new PageComponent
        {
            PageId = _page.Id,
            ComponentType = _draggedComponentType,
            Content = GetDefaultContent(_draggedComponentType),
            StyleJson = "{}",
            Order = _page.Components?.Count ?? 0,
            PropertiesJson = GetDefaultProperties(_draggedComponentType)
        };
        
        if (_page.Components == null)
            _page.Components = new List<PageComponent>();
            
        _page.Components.Add(component);
        _draggedComponentType = string.Empty;
    }
    
    private string GetDefaultContent(string componentType)
    {
        return componentType switch
        {
            "text" => "<p>Enter your text here...</p>",
            "image" => "",
            "gallery" => "",
            "video" => "",
            "button" => "Click Me",
            "divider" => "",
            _ => ""
        };
    }
    
    private string GetDefaultProperties(string componentType)
    {
        return componentType switch
        {
            "text" => "{}",
            "image" => System.Text.Json.JsonSerializer.Serialize(new { Src = "https://via.placeholder.com/800x400", Alt = "Image description" }),
            "gallery" => System.Text.Json.JsonSerializer.Serialize(new { Images = new[] { new { Src = "https://via.placeholder.com/400", Alt = "Gallery image 1" }, new { Src = "https://via.placeholder.com/400", Alt = "Gallery image 2" } } }),
            "video" => System.Text.Json.JsonSerializer.Serialize(new { Src = "https://www.youtube.com/embed/dQw4w9WgXcQ", Title = "Video" }),
            "button" => System.Text.Json.JsonSerializer.Serialize(new { Url = "#", Style = "primary" }),
            "divider" => "{}",
            _ => "{}"
        };
    }
    
    private void MoveComponentUp(PageComponent component)
    {
        if (_page?.Components == null || _page.Components.Count <= 1)
            return;
            
        var index = _page.Components.IndexOf(component);
        if (index <= 0)
            return;
            
        var prevComponent = _page.Components[index - 1];
        var currentOrder = component.Order;
        component.Order = prevComponent.Order;
        prevComponent.Order = currentOrder;
        
        _page.Components = _page.Components.OrderBy(c => c.Order).ToList();
    }
    
    private void MoveComponentDown(PageComponent component)
    {
        if (_page?.Components == null || _page.Components.Count <= 1)
            return;
            
        var index = _page.Components.IndexOf(component);
        if (index >= _page.Components.Count - 1)
            return;
            
        var nextComponent = _page.Components[index + 1];
        var currentOrder = component.Order;
        component.Order = nextComponent.Order;
        nextComponent.Order = currentOrder;
        
        _page.Components = _page.Components.OrderBy(c => c.Order).ToList();
    }
    
    private void RemoveComponent(PageComponent component)
    {
        if (_page?.Components == null)
            return;
            
        _page.Components.Remove(component);
        
        // Reorder remaining components
        for (int i = 0; i < _page.Components.Count; i++)
        {
            _page.Components[i].Order = i;
        }
    }
    
    private RenderFragment RenderComponent(PageComponent component) => builder =>
    {
        switch (component.ComponentType.ToLower())
        {
            case "text":
                builder.AddMarkupContent(0, component.Content);
                break;
                
            case "image":
                var props = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(component.PropertiesJson ?? "{}");
                builder.OpenElement(0, "img");
                builder.AddAttribute(1, "src", props?["Src"] ?? "");
                builder.AddAttribute(2, "alt", props?["Alt"] ?? "");
                builder.AddAttribute(3, "class", "img-fluid");
                builder.CloseElement();
                break;
                
            case "gallery":
                var galleryProps = System.Text.Json.JsonSerializer.Deserialize<dynamic>(component.PropertiesJson ?? "{}");
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "gallery");
                // Gallery rendering would go here
                builder.CloseElement();
                break;
                
            case "video":
                var videoProps = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(component.PropertiesJson ?? "{}");
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "video-container");
                builder.OpenElement(2, "iframe");
                builder.AddAttribute(3, "src", videoProps?["Src"] ?? "");
                builder.AddAttribute(4, "width", "100%");
                builder.AddAttribute(5, "height", "400");
                builder.AddAttribute(6, "frameborder", "0");
                builder.AddAttribute(7, "allowfullscreen", true);
                builder.CloseElement();
                builder.CloseElement();
                break;
                
            case "button":
                var buttonProps = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(component.PropertiesJson ?? "{}");
                builder.OpenElement(0, "a");
                builder.AddAttribute(1, "href", buttonProps?["Url"] ?? "#");
                builder.AddAttribute(2, "class", $"btn btn-{buttonProps?["Style"] ?? "primary"}");
                builder.AddContent(3, component.Content);
                builder.CloseElement();
                break;
                
            case "divider":
                builder.OpenElement(0, "hr");
                builder.AddAttribute(1, "class", "divider");
                builder.CloseElement();
                break;
                
            default:
                builder.AddMarkupContent(0, component.Content);
                break;
        }
    };
    
    private async Task SavePageAsync()
    {
        if (_page == null)
            return;
            
        try
        {
            _isSaving = true;
            
            if (PageId.HasValue)
            {
                // Update existing page
                await PageService.UpdatePageAsync(_page.Id, _page);
                
                // Update components
                if (_page.Components != null)
                {
                    foreach (var component in _page.Components)
                    {
                        if (component.Id > 0)
                        {
                            await ComponentService.UpdatePageComponentAsync(component.Id, component);
                        }
                        else
                        {
                            await ComponentService.CreatePageComponentAsync(component);
                        }
                    }
                }
            }
            else
            {
                // Create new page
                var createdPage = await PageService.CreatePageAsync(_page);
                
                // Create components
                if (_page.Components != null)
                {
                    foreach (var component in _page.Components)
                    {
                        component.PageId = createdPage.Id;
                        await ComponentService.CreatePageComponentAsync(component);
                    }
                }
                
                // Navigate to the page editor
                NavigationManager.NavigateTo($"/admin/pages/edit/{createdPage.Id}");
                return;
            }
            
            // Navigate back to page management
            NavigationManager.NavigateTo("/admin/pages");
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            _isSaving = false;
        }
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/pages");
    }
}