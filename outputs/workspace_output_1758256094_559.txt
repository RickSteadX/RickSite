@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="@(_isDarkTheme ? "dark-theme" : "")">
    <header class="navbar">
        <a href="/" class="navbar-brand">Alex Morgan</a>
        <NavMenu />
        <button class="theme-toggle" @onclick="ToggleTheme">
            @if (_isDarkTheme)
            {
                <span>‚òÄÔ∏è</span>
            }
            else
            {
                <span>üåô</span>
            }
        </button>
    </header>

    <main class="main">
        <div class="container">
            @Body
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; @DateTime.Now.Year - Alex Morgan. All rights reserved.</p>
            <div>
                <a href="https://github.com/alexmorgan" target="_blank" rel="noopener noreferrer">GitHub</a> |
                <a href="https://linkedin.com/in/alexmorgan" target="_blank" rel="noopener noreferrer">LinkedIn</a> |
                <a href="https://twitter.com/alexmorgan" target="_blank" rel="noopener noreferrer">Twitter</a>
            </div>
        </div>
    </footer>
</div>

@code {
    private bool _isDarkTheme;
    private IJSObjectReference _module;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/theme.js");
            _isDarkTheme = await _module.InvokeAsync<bool>("getThemePreference");
            StateHasChanged();
        }
    }

    private async Task ToggleTheme()
    {
        _isDarkTheme = !_isDarkTheme;
        if (_module != null)
        {
            await _module.InvokeVoidAsync("setThemePreference", _isDarkTheme);
        }
    }

    public void Dispose()
    {
        _module?.DisposeAsync();
    }
}