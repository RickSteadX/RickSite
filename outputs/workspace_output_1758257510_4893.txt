     1	using System;
     2	using System.Net.Http;
     3	using System.Net.Http.Json;
     4	using System.Security.Claims;
     5	using System.Threading.Tasks;
     6	using Microsoft.AspNetCore.Components.Authorization;
     7	using PersonalWebsite.Client.Models;
     8	using PersonalWebsite.Client.Services;
     9	
    10	namespace PersonalWebsite.Client.Auth
    11	{
    12	    public class CustomAuthStateProvider : AuthenticationStateProvider
    13	    {
    14	        private readonly AuthService _authService;
    15	        private User _cachedUser;
    16	
    17	        public CustomAuthStateProvider(AuthService authService)
    18	        {
    19	            _authService = authService;
    20	        }
    21	
    22	        public override async Task<AuthenticationState> GetAuthenticationStateAsync()
    23	        {
    24	            try
    25	            {
    26	                var user = await GetUserAsync();
    27	                
    28	                if (user == null)
    29	                {
    30	                    return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));
    31	                }
    32	
    33	                var identity = new ClaimsIdentity(new[]
    34	                {
    35	                    new Claim(ClaimTypes.Name, user.Username),
    36	                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
    37	                    new Claim(ClaimTypes.Email, user.Email),
    38	                    new Claim(ClaimTypes.Role, "Admin")
    39	                }, "apiauth_type");
    40	
    41	                return new AuthenticationState(new ClaimsPrincipal(identity));
    42	            }
    43	            catch
    44	            {
    45	                return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));
    46	            }
    47	        }
    48	
    49	        public async Task<User> GetUserAsync()
    50	        {
    51	            if (_cachedUser != null)
    52	                return _cachedUser;
    53	
    54	            _cachedUser = await _authService.GetCurrentUserAsync();
    55	            return _cachedUser;
    56	        }
    57	
    58	        public void NotifyUserAuthentication(User user)
    59	        {
    60	            _cachedUser = user;
    61	            
    62	            var identity = new ClaimsIdentity(new[]
    63	            {
    64	                new Claim(ClaimTypes.Name, user.Username),
    65	                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
    66	                new Claim(ClaimTypes.Email, user.Email),
    67	                new Claim(ClaimTypes.Role, "Admin")
    68	            }, "apiauth_type");
    69	            
    70	            var principal = new ClaimsPrincipal(identity);
    71	            
    72	            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(principal)));
    73	        }
    74	
    75	        public void NotifyUserLogout()
    76	        {
    77	            _cachedUser = null;
    78	            
    79	            var identity = new ClaimsIdentity();
    80	            var principal = new ClaimsPrincipal(identity);
    81	            
    82	            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(principal)));
    83	        }
    84	    }
    85	}