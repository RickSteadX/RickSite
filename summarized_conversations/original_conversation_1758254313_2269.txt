{'role': 'assistant', 'content': 'Now let\'s create the PageComponentsController for managing the components within our dynamic pages:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Server/Controllers/PageComponentsController.cs">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing PersonalWebsite.Server.Data;\nusing PersonalWebsite.Server.Models;\n\nnamespace PersonalWebsite.Server.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    public class PageComponentsController : ControllerBase\n    {\n        private readonly ApplicationDbContext _context;\n\n        public PageComponentsController(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        // GET: api/pagecomponents/page/5\n        [HttpGet("page/{pageId}")]\n        public async Task<ActionResult<IEnumerable<PageComponent>>> GetPageComponents(int pageId)\n        {\n            var page = await _context.Pages.FindAsync(pageId);\n            if (page == null)\n            {\n                return NotFound();\n            }\n\n            // If page is not published and user is not admin, return not found\n            if (!page.IsPublished && !User.IsInRole("Admin"))\n            {\n                return NotFound();\n            }\n\n            return await _context.PageComponents\n                .Where(pc => pc.PageId == pageId)\n                .OrderBy(pc => pc.Order)\n                .ToListAsync();\n        }\n\n        // GET: api/pagecomponents/5\n        [HttpGet("{id}")]\n        public async Task<ActionResult<PageComponent>> GetPageComponent(int id)\n        {\n            var pageComponent = await _context.PageComponents.FindAsync(id);\n\n            if (pageComponent == null)\n            {\n                return NotFound();\n            }\n\n            // Check if the component belongs to a published page or if user is admin\n            var page = await _context.Pages.FindAsync(pageComponent.PageId);\n            if (page == null || (!page.IsPublished && !User.IsInRole("Admin")))\n            {\n                return NotFound();\n            }\n\n            return pageComponent;\n        }\n\n        // POST: api/pagecomponents (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpPost]\n        public async Task<ActionResult<PageComponent>> CreatePageComponent(PageComponent pageComponent)\n        {\n            // Verify the page exists\n            var page = await _context.Pages.FindAsync(pageComponent.PageId);\n            if (page == null)\n            {\n                return BadRequest(new { message = "The specified page does not exist" });\n            }\n\n            _context.PageComponents.Add(pageComponent);\n            await _context.SaveChangesAsync();\n\n            return CreatedAtAction(nameof(GetPageComponent), new { id = pageComponent.Id }, pageComponent);\n        }\n\n        // PUT: api/pagecomponents/5 (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpPut("{id}")]\n        public async Task<IActionResult> UpdatePageComponent(int id, PageComponent pageComponent)\n        {\n            if (id != pageComponent.Id)\n            {\n                return BadRequest();\n            }\n\n            var existingComponent = await _context.PageComponents.FindAsync(id);\n            if (existingComponent == null)\n            {\n                return NotFound();\n            }\n\n            // Update component properties\n            existingComponent.ComponentType = pageComponent.ComponentType;\n            existingComponent.Content = pageComponent.Content;\n            existingComponent.StyleJson = pageComponent.StyleJson;\n            existingComponent.PropertiesJson = pageComponent.PropertiesJson;\n            existingComponent.Order = pageComponent.Order;\n\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (DbUpdateConcurrencyException)\n            {\n                if (!PageComponentExists(id))\n                {\n                    return NotFound();\n                }\n                else\n                {\n                    throw;\n                }\n            }\n\n            return NoContent();\n        }\n\n        // DELETE: api/pagecomponents/5 (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpDelete("{id}")]\n        public async Task<IActionResult> DeletePageComponent(int id)\n        {\n            var pageComponent = await _context.PageComponents.FindAsync(id);\n            if (pageComponent == null)\n            {\n                return NotFound();\n            }\n\n            _context.PageComponents.Remove(pageComponent);\n            await _context.SaveChangesAsync();\n\n            return NoContent();\n        }\n\n        // POST: api/pagecomponents/reorder (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpPost("reorder")]\n        public async Task<IActionResult> ReorderPageComponents([FromBody] List<ReorderItem> reorderItems)\n        {\n            foreach (var item in reorderItems)\n            {\n                var component = await _context.PageComponents.FindAsync(item.Id);\n                if (component != null)\n                {\n                    component.Order = item.Order;\n                }\n            }\n\n            await _context.SaveChangesAsync();\n            return NoContent();\n        }\n\n        private bool PageComponentExists(int id)\n        {\n            return _context.PageComponents.Any(e => e.Id == id);\n        }\n\n        public class ReorderItem\n        {\n            public int Id { get; set; }\n            public int Order { get; set; }\n        }\n    }\n}\n</create-file>\n</function_calls>'}