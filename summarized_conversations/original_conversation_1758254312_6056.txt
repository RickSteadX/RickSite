{'role': 'assistant', 'content': 'Now let\'s create the PagesController for managing our dynamic pages:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Server/Controllers/PagesController.cs">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing PersonalWebsite.Server.Data;\nusing PersonalWebsite.Server.Models;\n\nnamespace PersonalWebsite.Server.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    public class PagesController : ControllerBase\n    {\n        private readonly ApplicationDbContext _context;\n\n        public PagesController(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        // GET: api/pages\n        [HttpGet]\n        public async Task<ActionResult<IEnumerable<Page>>> GetPages()\n        {\n            return await _context.Pages\n                .Where(p => p.IsPublished)\n                .OrderBy(p => p.Order)\n                .ToListAsync();\n        }\n\n        // GET: api/pages/all (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpGet("all")]\n        public async Task<ActionResult<IEnumerable<Page>>> GetAllPages()\n        {\n            return await _context.Pages\n                .OrderBy(p => p.Order)\n                .ToListAsync();\n        }\n\n        // GET: api/pages/5\n        [HttpGet("{id}")]\n        public async Task<ActionResult<Page>> GetPage(int id)\n        {\n            var page = await _context.Pages.FindAsync(id);\n\n            if (page == null)\n            {\n                return NotFound();\n            }\n\n            // If page is not published and user is not admin, return not found\n            if (!page.IsPublished && !User.IsInRole("Admin"))\n            {\n                return NotFound();\n            }\n\n            return page;\n        }\n\n        // GET: api/pages/slug/home\n        [HttpGet("slug/{slug}")]\n        public async Task<ActionResult<Page>> GetPageBySlug(string slug)\n        {\n            var page = await _context.Pages.FirstOrDefaultAsync(p => p.Slug == slug);\n\n            if (page == null)\n            {\n                return NotFound();\n            }\n\n            // If page is not published and user is not admin, return not found\n            if (!page.IsPublished && !User.IsInRole("Admin"))\n            {\n                return NotFound();\n            }\n\n            return page;\n        }\n\n        // POST: api/pages (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpPost]\n        public async Task<ActionResult<Page>> CreatePage(Page page)\n        {\n            // Ensure slug is unique\n            if (await _context.Pages.AnyAsync(p => p.Slug == page.Slug))\n            {\n                return BadRequest(new { message = "A page with this slug already exists" });\n            }\n\n            page.CreatedAt = DateTime.UtcNow;\n            \n            if (page.IsPublished)\n            {\n                page.PublishedAt = DateTime.UtcNow;\n            }\n\n            _context.Pages.Add(page);\n            await _context.SaveChangesAsync();\n\n            return CreatedAtAction(nameof(GetPage), new { id = page.Id }, page);\n        }\n\n        // PUT: api/pages/5 (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpPut("{id}")]\n        public async Task<IActionResult> UpdatePage(int id, Page page)\n        {\n            if (id != page.Id)\n            {\n                return BadRequest();\n            }\n\n            // Check if slug is unique (except for this page)\n            if (await _context.Pages.AnyAsync(p => p.Slug == page.Slug && p.Id != id))\n            {\n                return BadRequest(new { message = "A page with this slug already exists" });\n            }\n\n            var existingPage = await _context.Pages.FindAsync(id);\n            if (existingPage == null)\n            {\n                return NotFound();\n            }\n\n            // Update page properties\n            existingPage.Title = page.Title;\n            existingPage.Slug = page.Slug;\n            existingPage.Description = page.Description;\n            existingPage.Content = page.Content;\n            existingPage.Order = page.Order;\n            existingPage.ShowInNavigation = page.ShowInNavigation;\n            existingPage.LayoutJson = page.LayoutJson;\n            existingPage.UpdatedAt = DateTime.UtcNow;\n\n            // Handle publishing status changes\n            if (!existingPage.IsPublished && page.IsPublished)\n            {\n                existingPage.IsPublished = true;\n                existingPage.PublishedAt = DateTime.UtcNow;\n            }\n            else if (existingPage.IsPublished && !page.IsPublished)\n            {\n                existingPage.IsPublished = false;\n            }\n\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (DbUpdateConcurrencyException)\n            {\n                if (!PageExists(id))\n                {\n                    return NotFound();\n                }\n                else\n                {\n                    throw;\n                }\n            }\n\n            return NoContent();\n        }\n\n        // DELETE: api/pages/5 (admin only)\n        [Authorize(Policy = "AdminOnly")]\n        [HttpDelete("{id}")]\n        public async Task<IActionResult> DeletePage(int id)\n        {\n            var page = await _context.Pages.FindAsync(id);\n            if (page == null)\n            {\n                return NotFound();\n            }\n\n            _context.Pages.Remove(page);\n            await _context.SaveChangesAsync();\n\n            return NoContent();\n        }\n\n        // GET: api/pages/navigation\n        [HttpGet("navigation")]\n        public async Task<ActionResult<IEnumerable<object>>> GetNavigation()\n        {\n            var pages = await _context.Pages\n                .Where(p => p.IsPublished && p.ShowInNavigation)\n                .OrderBy(p => p.Order)\n                .Select(p => new { p.Id, p.Title, p.Slug })\n                .ToListAsync();\n\n            return Ok(pages);\n        }\n\n        private bool PageExists(int id)\n        {\n            return _context.Pages.Any(e => e.Id == id);\n        }\n    }\n}\n</create-file>\n</function_calls>'}