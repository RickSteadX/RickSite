{'role': 'user', 'content': "/fast-deep-coder Project Brief: Personal Website\r\nGoal: Create a technologically advanced and visually impressive personal website with a built-in content management system for dynamic page creation.\r\n\r\nTechnology Stack\r\nFront-End: Blazor WASM\r\n\r\nBack-End: ASP .NET\r\n\r\nDatabase: SQLite\r\n\r\nRuntime: Podman\r\n\r\nWeb Server: Caddy\r\n\r\nFront-End Design\r\nThe website must be visually striking and highly interactive, using advanced techniques to impress visitors.\r\n\r\nInteractive Hero Section: The main landing section must feature a dynamic, interactive particle-based background that responds to mouse movement.\r\n\r\nParallax Scrolling: Implement parallax scrolling effects on key pages to create a sense of depth and a premium feel.\r\n\r\nSmooth Transitions: Ensure all page navigation is seamless with smooth transitions using CSS animations or a JavaScript library, avoiding jarring page reloads.\r\n\r\nTheme Toggle: Include a user-facing toggle to switch between a dark mode and a light mode theme.\r\n\r\nModern Typography: Utilize a carefully chosen modern font stack to define the site's aesthetic.\r\n\r\nBackend & Admin Functionality\r\nThe site must include a secure admin area for full content management.\r\n\r\nSecure Admin Panel: A password-protected admin login page that grants access to all backend management tools.\r\n\r\nDynamic Page Builder: The core of the admin area will be a built-in page creation system, similar to WordPress. This tool must allow an administrator to create entirely new, unique pages and add them to the websiteâ€™s navigation. The backend should store the layout and content structure of these pages, which the Blazor front-end will then render dynamically.\r\n\r\nRESTful API: The ASP.NET backend will serve all website content via a RESTful API, which the Blazor front-end will consume to render pages and content dynamically.\r\n\r\nContent\r\nAll content, including names, photos, and text, should be placeholder mockup data for now. The site should be populated with this placeholder content to demonstrate all features.\r\n\r\nPhase 1: Planning & Foundation\r\nDefine Placeholder Persona: Create the details for your mockup persona (name, professional title, bio, career highlights, etc.).\r\n\r\nInitial Design: Sketch out the wireframes and basic layout for the key pages (homepage, admin panel, a sample dynamic page).\r\n\r\nEnvironment Setup:\r\n\r\nInstall Podman and set up a basic container for the Caddy webserver.\r\n\r\nInstall the necessary .NET SDK and set up the project structure with a Blazor WASM client and an ASP.NET backend.\r\n\r\nConfigure SQLite for the backend.\r\n\r\nPhase 2: Core Development\r\nBuild the API: Develop the RESTful API endpoints in your ASP.NET backend to handle basic data operations (Create, Read, Update, Delete) for different content types.\r\n\r\nImplement Secure Authentication: Build the login and authentication system for your admin panel.\r\n\r\nCreate Static Pages: Develop the core front-end Blazor components for the pages that won't be dynamically created (e.g., the login page, the admin dashboard).\r\n\r\nPhase 3: Advanced Features\r\nDevelop the Dynamic Page Builder:\r\n\r\nCreate a user-friendly component in the Blazor admin panel (like a block editor or WYSIWYG) for building and arranging page content.\r\n\r\nDesign the database schema to store page layouts and component data dynamically.\r\n\r\nDevelop the front-end logic to consume the stored page data from the API and render the corresponding Blazor components on the fly.\r\n\r\nFlashy UI Implementation:\r\n\r\nImplement the interactive particle background on the hero section.\r\n\r\nAdd parallax scrolling to relevant components.\r\n\r\nBuild the dark mode/light mode toggle functionality.\r\n\r\nPhase 4: Finalization & Content\r\nPopulate with Mockup Data: Use your dynamic page builder and the admin panel to create and populate the website with all of the placeholder content.\r\n\r\nFinal Testing: Test all features, transitions, and API endpoints to ensure they are working as expected.\r\n\r\nContainerization: Finalize the Podman container configurations for both the backend and frontend for a smooth deployment."}