{'role': 'assistant', 'content': 'Now let\'s create the NavMenu component:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Shared/NavMenu.razor">\n@inject PageService PageService\n@inject NavigationManager NavigationManager\n@inject AuthenticationStateProvider AuthStateProvider\n@implements IDisposable\n\n<nav>\n    <ul class="navbar-nav">\n        @foreach (var item in _navigationItems)\n        {\n            <li class="nav-item">\n                <NavLink class="nav-link" href="@item.Url" Match="NavLinkMatch.All">\n                    @item.Title\n                </NavLink>\n            </li>\n        }\n        \n        <AuthorizeView>\n            <Authorized>\n                <li class="nav-item">\n                    <NavLink class="nav-link" href="/admin" Match="NavLinkMatch.Prefix">\n                        Admin\n                    </NavLink>\n                </li>\n                <li class="nav-item">\n                    <a class="nav-link" href="#" @onclick="LogoutAsync" @onclick:preventDefault>\n                        Logout\n                    </a>\n                </li>\n            </Authorized>\n            <NotAuthorized>\n                <li class="nav-item">\n                    <NavLink class="nav-link" href="/login">\n                        Login\n                    </NavLink>\n                </li>\n            </NotAuthorized>\n        </AuthorizeView>\n    </ul>\n</nav>\n\n@code {\n    private List<NavItem> _navigationItems = new List<NavItem>();\n    private bool _isDisposed;\n\n    protected override async Task OnInitializedAsync()\n    {\n        await LoadNavigationAsync();\n    }\n\n    private async Task LoadNavigationAsync()\n    {\n        try\n        {\n            var navItems = await PageService.GetNavigationAsync();\n            _navigationItems = new List<NavItem>();\n            \n            // Add home page\n            _navigationItems.Add(new NavItem { Title = "Home", Url = "/" });\n            \n            // Add other pages from the API\n            foreach (var item in navItems)\n            {\n                var itemDict = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(\n                    System.Text.Json.JsonSerializer.Serialize(item));\n                \n                if (itemDict.TryGetValue("slug", out var slugObj) && \n                    itemDict.TryGetValue("title", out var titleObj))\n                {\n                    string slug = slugObj.ToString();\n                    string title = titleObj.ToString();\n                    \n                    if (slug != "home") // Skip home page as we already added it\n                    {\n                        _navigationItems.Add(new NavItem\n                        {\n                            Title = title,\n                            Url = $"/page/{slug}"\n                        });\n                    }\n                }\n            }\n        }\n        catch (Exception)\n        {\n            // If API call fails, add default navigation\n            _navigationItems = new List<NavItem>\n            {\n                new NavItem { Title = "Home", Url = "/" },\n                new NavItem { Title = "About", Url = "/page/about" },\n                new NavItem { Title = "Portfolio", Url = "/page/portfolio" },\n                new NavItem { Title = "Contact", Url = "/page/contact" }\n            };\n        }\n    }\n\n    private async Task LogoutAsync()\n    {\n        var authStateProvider = (CustomAuthStateProvider)AuthStateProvider;\n        var authService = new AuthService(new HttpClient { BaseAddress = new Uri(NavigationManager.BaseUri) });\n        \n        try\n        {\n            await authService.LogoutAsync();\n            authStateProvider.NotifyUserLogout();\n            NavigationManager.NavigateTo("/");\n        }\n        catch (Exception)\n        {\n            // Handle logout failure\n        }\n    }\n\n    public void Dispose()\n    {\n        _isDisposed = true;\n    }\n\n    private class NavItem\n    {\n        public string Title { get; set; }\n        public string Url { get; set; }\n    }\n}\n</create-file>\n</function_calls>'}