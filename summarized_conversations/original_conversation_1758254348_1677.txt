{'role': 'assistant', 'content': 'Now let\'s create a dynamic page component that will render pages from our CMS:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Pages/DynamicPage.razor">\n@page "/page/{Slug}"\n@inject PageService PageService\n@inject IJSRuntime JSRuntime\n\n<PageTitle>@(_page?.Title ?? "Loading...") - Alex Morgan</PageTitle>\n\n@if (_loading)\n{\n    <div class="loading-container">\n        <div class="spinner"></div>\n        <p>Loading page...</p>\n    </div>\n}\nelse if (_page != null)\n{\n    <div class="dynamic-page">\n        <div class="container">\n            <h1>@_page.Title</h1>\n            \n            @if (!string.IsNullOrEmpty(_page.Description))\n            {\n                <p class="lead">@_page.Description</p>\n            }\n            \n            <div class="page-content">\n                @((MarkupString)_page.Content)\n            </div>\n            \n            @if (_components != null && _components.Any())\n            {\n                <div class="page-components">\n                    @foreach (var component in _components.OrderBy(c => c.Order))\n                    {\n                        <div class="component @component.ComponentType.ToLower()">\n                            @RenderComponent(component)\n                        </div>\n                    }\n                </div>\n            }\n        </div>\n    </div>\n}\nelse\n{\n    <div class="container">\n        <h1>Page Not Found</h1>\n        <p>Sorry, the page you are looking for does not exist or has been moved.</p>\n        <a href="/" class="btn btn-primary">Return to Home</a>\n    </div>\n}\n\n@code {\n    [Parameter]\n    public string Slug { get; set; }\n    \n    private Page _page;\n    private List<PageComponent> _components;\n    private bool _loading = true;\n    private string _errorMessage;\n    \n    protected override async Task OnInitializedAsync()\n    {\n        await LoadPageAsync();\n    }\n    \n    protected override async Task OnParametersSetAsync()\n    {\n        await LoadPageAsync();\n    }\n    \n    private async Task LoadPageAsync()\n    {\n        try\n        {\n            _loading = true;\n            _page = await PageService.GetPageBySlugAsync(Slug);\n            \n            if (_page != null)\n            {\n                _components = await PageService.GetPageComponentsAsync(_page.Id);\n            }\n        }\n        catch (Exception ex)\n        {\n            _errorMessage = ex.Message;\n            _page = null;\n        }\n        finally\n        {\n            _loading = false;\n        }\n    }\n    \n    private RenderFragment RenderComponent(PageComponent component) => builder =>\n    {\n        switch (component.ComponentType.ToLower())\n        {\n            case "text":\n                builder.AddMarkupContent(0, component.Content);\n                break;\n                \n            case "image":\n                var props = component.GetProperties<ImageComponentProps>();\n                builder.OpenElement(0, "img");\n                builder.AddAttribute(1, "src", props.Src);\n                builder.AddAttribute(2, "alt", props.Alt);\n                builder.AddAttribute(3, "class", "img-fluid");\n                if (!string.IsNullOrEmpty(props.Width))\n                {\n                    builder.AddAttribute(4, "width", props.Width);\n                }\n                if (!string.IsNullOrEmpty(props.Height))\n                {\n                    builder.AddAttribute(5, "height", props.Height);\n                }\n                builder.CloseElement();\n                break;\n                \n            case "video":\n                var videoProps = component.GetProperties<VideoComponentProps>();\n                builder.OpenElement(0, "div");\n                builder.AddAttribute(1, "class", "video-container");\n                builder.OpenElement(2, "iframe");\n                builder.AddAttribute(3, "src", videoProps.Src);\n                builder.AddAttribute(4, "width", "100%");\n                builder.AddAttribute(5, "height", "400");\n                builder.AddAttribute(6, "frameborder", "0");\n                builder.AddAttribute(7, "allowfullscreen", true);\n                builder.CloseElement();\n                builder.CloseElement();\n                break;\n                \n            case "gallery":\n                var galleryProps = component.GetProperties<GalleryComponentProps>();\n                builder.OpenElement(0, "div");\n                builder.AddAttribute(1, "class", "gallery");\n                \n                foreach (var image in galleryProps.Images)\n                {\n                    builder.OpenElement(2, "div");\n                    builder.AddAttribute(3, "class", "gallery-item");\n                    builder.OpenElement(4, "img");\n                    builder.AddAttribute(5, "src", image.Src);\n                    builder.AddAttribute(6, "alt", image.Alt);\n                    builder.AddAttribute(7, "class", "img-fluid");\n                    builder.CloseElement();\n                    builder.CloseElement();\n                }\n                \n                builder.CloseElement();\n                break;\n                \n            default:\n                builder.AddMarkupContent(0, component.Content);\n                break;\n        }\n    };\n    \n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            await JSRuntime.InvokeVoidAsync("initializeApp");\n        }\n    }\n    \n    private class ImageComponentProps\n    {\n        public string Src { get; set; }\n        public string Alt { get; set; }\n        public string Width { get; set; }\n        public string Height { get; set; }\n    }\n    \n    private class VideoComponentProps\n    {\n        public string Src { get; set; }\n        public string Title { get; set; }\n    }\n    \n    private class GalleryComponentProps\n    {\n        public List<GalleryImage> Images { get; set; } = new List<GalleryImage>();\n    }\n    \n    private class GalleryImage\n    {\n        public string Src { get; set; }\n        public string Alt { get; set; }\n    }\n}\n</create-file>\n</function_calls>'}