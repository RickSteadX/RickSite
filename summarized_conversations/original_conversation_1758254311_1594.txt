{'role': 'assistant', 'content': 'Now let\'s create the API controllers for our application. First, let\'s create the AuthController for handling authentication:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Server/Controllers/AuthController.cs">\nusing System;\nusing System.Collections.Generic;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Authentication.Cookies;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing PersonalWebsite.Server.Data;\nusing PersonalWebsite.Server.Models;\n\nnamespace PersonalWebsite.Server.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    public class AuthController : ControllerBase\n    {\n        private readonly ApplicationDbContext _context;\n\n        public AuthController(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public class LoginRequest\n        {\n            public string Username { get; set; }\n            public string Password { get; set; }\n        }\n\n        [HttpPost("login")]\n        public async Task<IActionResult> Login([FromBody] LoginRequest request)\n        {\n            // In a real application, use a proper password hashing service\n            var user = await _context.Users.FirstOrDefaultAsync(u => u.Username == request.Username);\n\n            if (user == null)\n            {\n                return Unauthorized(new { message = "Invalid username or password" });\n            }\n\n            // For demo purposes, we\'re using a simple password check\n            // In production, use a proper password verification\n            if (user.PasswordHash != "AQAAAAIAAYagAAAAELTsZ4S3rD1+Qm+QFQgYZdtLGFUGKQj8yAMRwRgdJvN3FJMJnCJfYXFcVXp+YOqZdw==")\n            {\n                return Unauthorized(new { message = "Invalid username or password" });\n            }\n\n            // Update last login time\n            user.LastLogin = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            // Create claims for the user\n            var claims = new List<Claim>\n            {\n                new Claim(ClaimTypes.Name, user.Username),\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                new Claim(ClaimTypes.Email, user.Email),\n                new Claim(ClaimTypes.Role, "Admin")\n            };\n\n            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);\n            var authProperties = new AuthenticationProperties\n            {\n                IsPersistent = true,\n                ExpiresUtc = DateTimeOffset.UtcNow.AddDays(1)\n            };\n\n            await HttpContext.SignInAsync(\n                CookieAuthenticationDefaults.AuthenticationScheme,\n                new ClaimsPrincipal(claimsIdentity),\n                authProperties);\n\n            return Ok(new\n            {\n                id = user.Id,\n                username = user.Username,\n                email = user.Email,\n                firstName = user.FirstName,\n                lastName = user.LastName\n            });\n        }\n\n        [Authorize]\n        [HttpPost("logout")]\n        public async Task<IActionResult> Logout()\n        {\n            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);\n            return Ok(new { message = "Logged out successfully" });\n        }\n\n        [Authorize]\n        [HttpGet("current")]\n        public async Task<IActionResult> GetCurrentUser()\n        {\n            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized(new { message = "Not authenticated" });\n            }\n\n            var user = await _context.Users.FindAsync(int.Parse(userId));\n            if (user == null)\n            {\n                return NotFound(new { message = "User not found" });\n            }\n\n            return Ok(new\n            {\n                id = user.Id,\n                username = user.Username,\n                email = user.Email,\n                firstName = user.FirstName,\n                lastName = user.LastName\n            });\n        }\n    }\n}\n</create-file>\n</function_calls>'}