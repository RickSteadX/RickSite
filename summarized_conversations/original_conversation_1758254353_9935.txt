{'role': 'assistant', 'content': 'Now let\'s create the page management component for the admin area:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Pages/Admin/PageManagement.razor">\n@page "/admin/pages"\n@attribute [Authorize]\n@layout AdminLayout\n@inject PageService PageService\n@inject NavigationManager NavigationManager\n@inject IJSRuntime JSRuntime\n\n<PageTitle>Manage Pages - Admin Dashboard</PageTitle>\n\n<div class="container">\n    <div class="d-flex justify-content-between align-items-center mb-4">\n        <h1>Manage Pages</h1>\n        <a href="/admin/pages/create" class="btn btn-primary">Create New Page</a>\n    </div>\n    \n    @if (_loading)\n    {\n        <div class="loading-container">\n            <div class="spinner"></div>\n            <p>Loading pages...</p>\n        </div>\n    }\n    else if (_pages != null && _pages.Any())\n    {\n        <div class="card">\n            <div class="card-body">\n                <div class="table-responsive">\n                    <table class="table table-hover">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Slug</th>\n                                <th>Status</th>\n                                <th>Navigation</th>\n                                <th>Created</th>\n                                <th>Updated</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            @foreach (var page in _pages.OrderBy(p => p.Order))\n                            {\n                                <tr>\n                                    <td>@page.Title</td>\n                                    <td>@page.Slug</td>\n                                    <td>\n                                        @if (page.IsPublished)\n                                        {\n                                            <span class="badge bg-success">Published</span>\n                                        }\n                                        else\n                                        {\n                                            <span class="badge bg-secondary">Draft</span>\n                                        }\n                                    </td>\n                                    <td>\n                                        @if (page.ShowInNavigation)\n                                        {\n                                            <span class="badge bg-info">Visible</span>\n                                        }\n                                        else\n                                        {\n                                            <span class="badge bg-secondary">Hidden</span>\n                                        }\n                                    </td>\n                                    <td>@page.CreatedAt.ToString("MMM d, yyyy")</td>\n                                    <td>@(page.UpdatedAt?.ToString("MMM d, yyyy") ?? "-")</td>\n                                    <td>\n                                        <div class="btn-group">\n                                            <a href="/admin/pages/edit/@page.Id" class="btn btn-sm btn-primary">Edit</a>\n                                            <a href="/page/@page.Slug" target="_blank" class="btn btn-sm btn-outline-primary">View</a>\n                                            <button class="btn btn-sm btn-danger" @onclick="() => DeletePageAsync(page)">Delete</button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    }\n    else\n    {\n        <div class="alert alert-info">\n            <p>No pages found. <a href="/admin/pages/create">Create your first page</a>.</p>\n        </div>\n    }\n</div>\n\n@code {\n    private List<Page> _pages;\n    private bool _loading = true;\n    \n    protected override async Task OnInitializedAsync()\n    {\n        await LoadPagesAsync();\n    }\n    \n    private async Task LoadPagesAsync()\n    {\n        try\n        {\n            _loading = true;\n            _pages = await PageService.GetAllPagesAsync();\n        }\n        catch (Exception)\n        {\n            _pages = new List<Page>();\n        }\n        finally\n        {\n            _loading = false;\n        }\n    }\n    \n    private async Task DeletePageAsync(Page page)\n    {\n        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the page \'{page.Title}\'? This action cannot be undone.");\n        \n        if (confirmed)\n        {\n            try\n            {\n                await PageService.DeletePageAsync(page.Id);\n                _pages.Remove(page);\n            }\n            catch (Exception)\n            {\n                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete the page. Please try again.");\n            }\n        }\n    }\n}\n</create-file>\n</function_calls>'}