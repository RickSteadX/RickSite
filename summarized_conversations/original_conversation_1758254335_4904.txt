{'role': 'assistant', 'content': 'Now let\'s create a custom authentication state provider for our Blazor application:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Auth/CustomAuthStateProvider.cs">\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components.Authorization;\nusing PersonalWebsite.Client.Models;\nusing PersonalWebsite.Client.Services;\n\nnamespace PersonalWebsite.Client.Auth\n{\n    public class CustomAuthStateProvider : AuthenticationStateProvider\n    {\n        private readonly AuthService _authService;\n        private User _cachedUser;\n\n        public CustomAuthStateProvider(AuthService authService)\n        {\n            _authService = authService;\n        }\n\n        public override async Task<AuthenticationState> GetAuthenticationStateAsync()\n        {\n            try\n            {\n                var user = await GetUserAsync();\n                \n                if (user == null)\n                {\n                    return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));\n                }\n\n                var identity = new ClaimsIdentity(new[]\n                {\n                    new Claim(ClaimTypes.Name, user.Username),\n                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                    new Claim(ClaimTypes.Email, user.Email),\n                    new Claim(ClaimTypes.Role, "Admin")\n                }, "apiauth_type");\n\n                return new AuthenticationState(new ClaimsPrincipal(identity));\n            }\n            catch\n            {\n                return new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()));\n            }\n        }\n\n        public async Task<User> GetUserAsync()\n        {\n            if (_cachedUser != null)\n                return _cachedUser;\n\n            _cachedUser = await _authService.GetCurrentUserAsync();\n            return _cachedUser;\n        }\n\n        public void NotifyUserAuthentication(User user)\n        {\n            _cachedUser = user;\n            \n            var identity = new ClaimsIdentity(new[]\n            {\n                new Claim(ClaimTypes.Name, user.Username),\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                new Claim(ClaimTypes.Email, user.Email),\n                new Claim(ClaimTypes.Role, "Admin")\n            }, "apiauth_type");\n            \n            var principal = new ClaimsPrincipal(identity);\n            \n            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(principal)));\n        }\n\n        public void NotifyUserLogout()\n        {\n            _cachedUser = null;\n            \n            var identity = new ClaimsIdentity();\n            var principal = new ClaimsPrincipal(identity);\n            \n            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(principal)));\n        }\n    }\n}\n</create-file>\n</function_calls>'}