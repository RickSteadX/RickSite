{'role': 'assistant', 'content': 'Now let\'s create a simple page builder component:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Pages/Admin/PageBuilder.razor">\n@page "/admin/page-builder"\n@page "/admin/page-builder/{PageId:int}"\n@attribute [Authorize]\n@layout AdminLayout\n@inject PageService PageService\n@inject PageComponentService ComponentService\n@inject NavigationManager NavigationManager\n@inject IJSRuntime JSRuntime\n\n<PageTitle>Page Builder - Admin Dashboard</PageTitle>\n\n<div class="container-fluid">\n    <div class="d-flex justify-content-between align-items-center mb-4">\n        <h1>Page Builder</h1>\n        <div>\n            <button class="btn btn-outline-secondary me-2" @onclick="NavigateBack">Cancel</button>\n            <button class="btn btn-primary" @onclick="SavePageAsync" disabled="@_isSaving">\n                @if (_isSaving)\n                {\n                    <span>Saving...</span>\n                }\n                else\n                {\n                    <span>Save Page</span>\n                }\n            </button>\n        </div>\n    </div>\n    \n    @if (_loading)\n    {\n        <div class="loading-container">\n            <div class="spinner"></div>\n            <p>Loading page builder...</p>\n        </div>\n    }\n    else if (_page != null)\n    {\n        <div class="page-builder">\n            <div class="component-sidebar">\n                <div class="card mb-3">\n                    <div class="card-header">\n                        <h5>Page Information</h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="form-group mb-3">\n                            <label for="title" class="form-label">Page Title</label>\n                            <input id="title" @bind="_page.Title" class="form-control" />\n                        </div>\n                        \n                        <div class="form-group mb-3">\n                            <label for="slug" class="form-label">Page Slug</label>\n                            <div class="input-group">\n                                <span class="input-group-text">/page/</span>\n                                <input id="slug" @bind="_page.Slug" class="form-control" />\n                            </div>\n                        </div>\n                        \n                        <div class="form-group mb-3">\n                            <div class="form-check form-switch">\n                                <input id="isPublished" @bind="_page.IsPublished" type="checkbox" class="form-check-input" />\n                                <label for="isPublished" class="form-check-label">Published</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="card mb-3">\n                    <div class="card-header">\n                        <h5>Components</h5>\n                    </div>\n                    <div class="card-body">\n                        <p>Drag components to add them to your page:</p>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'text\')">\n                            <h5>Text Block</h5>\n                            <p>Add paragraphs, headings, and formatted text.</p>\n                        </div>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'image\')">\n                            <h5>Image</h5>\n                            <p>Add a single image with optional caption.</p>\n                        </div>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'gallery\')">\n                            <h5>Gallery</h5>\n                            <p>Add a collection of images in a grid layout.</p>\n                        </div>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'video\')">\n                            <h5>Video</h5>\n                            <p>Embed a video from YouTube or Vimeo.</p>\n                        </div>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'button\')">\n                            <h5>Button</h5>\n                            <p>Add a call-to-action button.</p>\n                        </div>\n                        \n                        <div class="component-item" draggable="true" @ondragstart="() => HandleDragStart(\'divider\')">\n                            <h5>Divider</h5>\n                            <p>Add a horizontal line to separate content.</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class="canvas-area" \n                 @ondragover:preventDefault\n                 @ondragover="HandleDragOver"\n                 @ondrop:preventDefault\n                 @ondrop="HandleDrop">\n                \n                <div class="card mb-3">\n                    <div class="card-header">\n                        <h5>Page Content</h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="form-group mb-3">\n                            <label for="content" class="form-label">Main Content</label>\n                            <textarea id="content" @bind="_page.Content" class="form-control" rows="10"></textarea>\n                            <small class="form-text text-muted">You can use HTML tags for formatting.</small>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="card">\n                    <div class="card-header">\n                        <h5>Page Components</h5>\n                    </div>\n                    <div class="card-body">\n                        @if (_components != null && _components.Any())\n                        {\n                            <div class="components-list">\n                                @foreach (var component in _components.OrderBy(c => c.Order))\n                                {\n                                    <div class="component-wrapper mb-3">\n                                        <div class="component-header d-flex justify-content-between align-items-center">\n                                            <h6>@component.ComponentType Component</h6>\n                                            <div>\n                                                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => EditComponent(component)">Edit</button>\n                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteComponent(component)">Delete</button>\n                                            </div>\n                                        </div>\n                                        <div class="component-preview p-3 border rounded">\n                                            @switch (component.ComponentType.ToLower())\n                                            {\n                                                case "text":\n                                                    <div>@((MarkupString)component.Content)</div>\n                                                    break;\n                                                case "image":\n                                                    <div class="text-center">\n                                                        <img src="@GetImageSrc(component)" alt="Image component" class="img-fluid" style="max-height: 200px;" />\n                                                    </div>\n                                                    break;\n                                                case "video":\n                                                    <div class="text-center">\n                                                        <div class="ratio ratio-16x9">\n                                                            <iframe src="@GetVideoSrc(component)" allowfullscreen></iframe>\n                                                        </div>\n                                                    </div>\n                                                    break;\n                                                case "gallery":\n                                                    <div class="text-center">\n                                                        <p>[Gallery Component - @GetGalleryImageCount(component) images]</p>\n                                                    </div>\n                                                    break;\n                                                case "button":\n                                                    <div class="text-center">\n                                                        <button class="btn btn-primary" disabled>@GetButtonText(component)</button>\n                                                    </div>\n                                                    break;\n                                                case "divider":\n                                                    <hr />\n                                                    break;\n                                                default:\n                                                    <div>@component.Content</div>\n                                                    break;\n                                            }\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        }\n                        else\n                        {\n                            <div class="dropzone @(_isDraggingOver ? "active" : "")">\n                                <p class="text-center my-5">Drag components here to add them to your page</p>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n    else\n    {\n        <div class="alert alert-warning">\n            <p>No page selected. Please <a href="/admin/pages">select a page</a> to edit or <a href="/admin/pages/create">create a new page</a>.</p>\n        </div>\n    }\n</div>\n\n@code {\n    [Parameter]\n    public int? PageId { get; set; }\n    \n    private Page _page;\n    private List<PageComponent> _components = new List<PageComponent>();\n    private bool _loading = true;\n    private bool _isSaving = false;\n    private bool _isDraggingOver = false;\n    private string _draggedComponentType;\n    \n    protected override async Task OnInitializedAsync()\n    {\n        await LoadPageAsync();\n    }\n    \n    protected override async Task OnParametersSetAsync()\n    {\n        if (PageId != null)\n        {\n            await LoadPageAsync();\n        }\n    }\n    \n    private async Task LoadPageAsync()\n    {\n        try\n        {\n            _loading = true;\n            \n            if (PageId.HasValue)\n            {\n                _page = await PageService.GetPageAsync(PageId.Value);\n                _components = await ComponentService.GetPageComponentsAsync(PageId.Value);\n            }\n            else\n            {\n                // Create a temporary page for the builder\n                _page = new Page\n                {\n                    Title = "New Page",\n                    Slug = "new-page",\n                    Content = "<h1>New Page</h1><p>Enter your content here...</p>",\n                    CreatedAt = DateTime.UtcNow,\n                    IsPublished = false\n                };\n                _components = new List<PageComponent>();\n            }\n        }\n        catch (Exception)\n        {\n            NavigationManager.NavigateTo("/admin/pages");\n        }\n        finally\n        {\n            _loading = false;\n        }\n    }\n    \n    private void HandleDragStart(string componentType)\n    {\n        _draggedComponentType = componentType;\n    }\n    \n    private void HandleDragOver()\n    {\n        _isDraggingOver = true;\n    }\n    \n    private async Task HandleDrop()\n    {\n        _isDraggingOver = false;\n        \n        if (string.IsNullOrEmpty(_draggedComponentType))\n            return;\n            \n        if (_page.Id == 0)\n        {\n            // Save the page first if it\'s new\n            try\n            {\n                _page = await PageService.CreatePageAsync(_page);\n                PageId = _page.Id;\n            }\n            catch\n            {\n                await JSRuntime.InvokeVoidAsync("alert", "Please save the page before adding components.");\n                return;\n            }\n        }\n        \n        // Create a new component based on the dragged type\n        var component = new PageComponent\n        {\n            PageId = _page.Id,\n            ComponentType = _draggedComponentType,\n            Order = _components.Count > 0 ? _components.Max(c => c.Order) + 1 : 0\n        };\n        \n        // Set default content based on component type\n        switch (_draggedComponentType.ToLower())\n        {\n            case "text":\n                component.Content = "<p>Enter your text here...</p>";\n                break;\n            case "image":\n                component.Content = "";\n                component.SetProperties(new { Src = "https://via.placeholder.com/800x400", Alt = "Image description" });\n                break;\n            case "gallery":\n                component.Content = "";\n                component.SetProperties(new { \n                    Images = new[] {\n                        new { Src = "https://via.placeholder.com/400x300", Alt = "Gallery image 1" },\n                        new { Src = "https://via.placeholder.com/400x300", Alt = "Gallery image 2" },\n                        new { Src = "https://via.placeholder.com/400x300", Alt = "Gallery image 3" }\n                    }\n                });\n                break;\n            case "video":\n                component.Content = "";\n                component.SetProperties(new { Src = "https://www.youtube.com/embed/dQw4w9WgXcQ", Title = "Video title" });\n                break;\n            case "button":\n                component.Content = "Click Me";\n                component.SetProperties(new { Url = "#", Style = "primary" });\n                break;\n            case "divider":\n                component.Content = "";\n                break;\n        }\n        \n        try\n        {\n            var savedComponent = await ComponentService.CreatePageComponentAsync(component);\n            _components.Add(savedComponent);\n        }\n        catch\n        {\n            await JSRuntime.InvokeVoidAsync("alert", "Failed to add component. Please try again.");\n        }\n        \n        _draggedComponentType = null;\n    }\n    \n    private async Task EditComponent(PageComponent component)\n    {\n        // In a real implementation, this would open a modal or editor for the component\n        await JSRuntime.InvokeVoidAsync("alert", "Component editing would open here in a real implementation.");\n    }\n    \n    private async Task DeleteComponent(PageComponent component)\n    {\n        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this component?");\n        \n        if (confirmed)\n        {\n            try\n            {\n                await ComponentService.DeletePageComponentAsync(component.Id);\n                _components.Remove(component);\n            }\n            catch\n            {\n                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete component. Please try again.");\n            }\n        }\n    }\n    \n    private async Task SavePageAsync()\n    {\n        try\n        {\n            _isSaving = true;\n            \n            if (_page.Id == 0)\n            {\n                _page = await PageService.CreatePageAsync(_page);\n                PageId = _page.Id;\n                NavigationManager.NavigateTo($"/admin/page-builder/{_page.Id}");\n            }\n            else\n            {\n                await PageService.UpdatePageAsync(_page.Id, _page);\n            }\n            \n            await JSRuntime.InvokeVoidAsync("alert", "Page saved successfully!");\n        }\n        catch (Exception ex)\n        {\n            await JSRuntime.InvokeVoidAsync("alert", $"Failed to save page: {ex.Message}");\n        }\n        finally\n        {\n            _isSaving = false;\n        }\n    }\n    \n    private void NavigateBack()\n    {\n        NavigationManager.NavigateTo("/admin/pages");\n    }\n    \n    private string GetImageSrc(PageComponent component)\n    {\n        try\n        {\n            var props = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(component.PropertiesJson);\n            return props["Src"].ToString();\n        }\n        catch\n        {\n            return "https://via.placeholder.com/800x400";\n        }\n    }\n    \n    private string GetVideoSrc(PageComponent component)\n    {\n        try\n        {\n            var props = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(component.PropertiesJson);\n            return props["Src"].ToString();\n        }\n        catch\n        {\n            return "https://www.youtube.com/embed/dQw4w9WgXcQ";\n        }\n    }\n    \n    private int GetGalleryImageCount(PageComponent component)\n    {\n        try\n        {\n            var props = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(component.PropertiesJson);\n            var images = System.Text.Json.JsonSerializer.Deserialize<object[]>(props["Images"].ToString());\n            return images.Length;\n        }\n        catch\n        {\n            return 0;\n        }\n    }\n    \n    private string GetButtonText(PageComponent component)\n    {\n        return string.IsNullOrEmpty(component.Content) ? "Button" : component.Content;\n    }\n}\n</create-file>\n</function_calls>'}