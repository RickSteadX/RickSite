{'role': 'assistant', 'content': 'Now let\'s create the page editor component:\n\n<function_calls>\n<create-file file_path="PersonalWebsite/PersonalWebsite.Client/Pages/Admin/PageEditor.razor">\n@page "/admin/pages/create"\n@page "/admin/pages/edit/{Id:int}"\n@attribute [Authorize]\n@layout AdminLayout\n@inject PageService PageService\n@inject NavigationManager NavigationManager\n@inject IJSRuntime JSRuntime\n\n<PageTitle>@(_isNewPage ? "Create Page" : "Edit Page") - Admin Dashboard</PageTitle>\n\n<div class="container">\n    <div class="d-flex justify-content-between align-items-center mb-4">\n        <h1>@(_isNewPage ? "Create New Page" : $"Edit Page: {_page.Title}")</h1>\n        <div>\n            <button class="btn btn-outline-secondary me-2" @onclick="NavigateBack">Cancel</button>\n            <button class="btn btn-primary" @onclick="SavePageAsync" disabled="@_isSaving">\n                @if (_isSaving)\n                {\n                    <span>Saving...</span>\n                }\n                else\n                {\n                    <span>Save Page</span>\n                }\n            </button>\n        </div>\n    </div>\n    \n    @if (_loading)\n    {\n        <div class="loading-container">\n            <div class="spinner"></div>\n            <p>Loading page data...</p>\n        </div>\n    }\n    else\n    {\n        <div class="card">\n            <div class="card-body">\n                <EditForm Model="@_page" OnValidSubmit="SavePageAsync">\n                    <DataAnnotationsValidator />\n                    <ValidationSummary />\n                    \n                    <div class="row">\n                        <div class="col-md-8">\n                            <div class="form-group mb-3">\n                                <label for="title" class="form-label">Page Title</label>\n                                <InputText id="title" @bind-Value="_page.Title" class="form-control" />\n                                <ValidationMessage For="@(() => _page.Title)" />\n                            </div>\n                            \n                            <div class="form-group mb-3">\n                                <label for="slug" class="form-label">Page Slug</label>\n                                <div class="input-group">\n                                    <span class="input-group-text">/page/</span>\n                                    <InputText id="slug" @bind-Value="_page.Slug" class="form-control" />\n                                </div>\n                                <ValidationMessage For="@(() => _page.Slug)" />\n                                <small class="form-text text-muted">The slug is used in the URL: https://example.com/page/your-slug</small>\n                            </div>\n                            \n                            <div class="form-group mb-3">\n                                <label for="description" class="form-label">Description</label>\n                                <InputTextArea id="description" @bind-Value="_page.Description" class="form-control" rows="3" />\n                                <ValidationMessage For="@(() => _page.Description)" />\n                            </div>\n                            \n                            <div class="form-group mb-3">\n                                <label for="content" class="form-label">Content</label>\n                                <InputTextArea id="content" @bind-Value="_page.Content" class="form-control" rows="10" />\n                                <ValidationMessage For="@(() => _page.Content)" />\n                                <small class="form-text text-muted">You can use HTML tags for formatting.</small>\n                            </div>\n                        </div>\n                        \n                        <div class="col-md-4">\n                            <div class="card mb-3">\n                                <div class="card-header">\n                                    <h5>Page Settings</h5>\n                                </div>\n                                <div class="card-body">\n                                    <div class="form-group mb-3">\n                                        <div class="form-check form-switch">\n                                            <InputCheckbox id="isPublished" @bind-Value="_page.IsPublished" class="form-check-input" />\n                                            <label for="isPublished" class="form-check-label">Published</label>\n                                        </div>\n                                        <small class="form-text text-muted">Toggle to make the page visible to visitors.</small>\n                                    </div>\n                                    \n                                    <div class="form-group mb-3">\n                                        <div class="form-check form-switch">\n                                            <InputCheckbox id="showInNavigation" @bind-Value="_page.ShowInNavigation" class="form-check-input" />\n                                            <label for="showInNavigation" class="form-check-label">Show in Navigation</label>\n                                        </div>\n                                        <small class="form-text text-muted">Toggle to include this page in the main navigation menu.</small>\n                                    </div>\n                                    \n                                    <div class="form-group mb-3">\n                                        <label for="order" class="form-label">Navigation Order</label>\n                                        <InputNumber id="order" @bind-Value="_page.Order" class="form-control" />\n                                        <ValidationMessage For="@(() => _page.Order)" />\n                                        <small class="form-text text-muted">Lower numbers appear first in the navigation.</small>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div class="card">\n                                <div class="card-header">\n                                    <h5>Page Information</h5>\n                                </div>\n                                <div class="card-body">\n                                    @if (!_isNewPage)\n                                    {\n                                        <p><strong>Created:</strong> @_page.CreatedAt.ToString("MMM d, yyyy h:mm tt")</p>\n                                        \n                                        @if (_page.UpdatedAt.HasValue)\n                                        {\n                                            <p><strong>Last Updated:</strong> @_page.UpdatedAt.Value.ToString("MMM d, yyyy h:mm tt")</p>\n                                        }\n                                        \n                                        @if (_page.PublishedAt.HasValue)\n                                        {\n                                            <p><strong>Published:</strong> @_page.PublishedAt.Value.ToString("MMM d, yyyy h:mm tt")</p>\n                                        }\n                                        \n                                        <hr />\n                                        \n                                        <div class="d-grid gap-2">\n                                            <a href="/page/@_page.Slug" target="_blank" class="btn btn-outline-primary">View Page</a>\n                                            <a href="/admin/page-builder/@_page.Id" class="btn btn-outline-secondary">Open in Page Builder</a>\n                                        </div>\n                                    }\n                                    else\n                                    {\n                                        <p>Save this page to access additional options.</p>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </EditForm>\n            </div>\n        </div>\n    }\n</div>\n\n@code {\n    [Parameter]\n    public int? Id { get; set; }\n    \n    private Page _page = new Page();\n    private bool _isNewPage => Id == null;\n    private bool _loading = false;\n    private bool _isSaving = false;\n    \n    protected override async Task OnInitializedAsync()\n    {\n        await LoadPageAsync();\n    }\n    \n    private async Task LoadPageAsync()\n    {\n        if (_isNewPage)\n        {\n            // Initialize new page\n            _page = new Page\n            {\n                CreatedAt = DateTime.UtcNow,\n                IsPublished = false,\n                ShowInNavigation = true,\n                Order = 99,\n                Content = "<h1>New Page</h1><p>Enter your content here...</p>"\n            };\n        }\n        else\n        {\n            try\n            {\n                _loading = true;\n                _page = await PageService.GetPageAsync(Id.Value);\n                \n                if (_page == null)\n                {\n                    NavigationManager.NavigateTo("/admin/pages");\n                }\n            }\n            catch (Exception)\n            {\n                NavigationManager.NavigateTo("/admin/pages");\n            }\n            finally\n            {\n                _loading = false;\n            }\n        }\n    }\n    \n    private async Task SavePageAsync()\n    {\n        try\n        {\n            _isSaving = true;\n            \n            // Ensure slug is URL-friendly\n            _page.Slug = MakeUrlFriendly(_page.Slug);\n            \n            if (_isNewPage)\n            {\n                await PageService.CreatePageAsync(_page);\n            }\n            else\n            {\n                await PageService.UpdatePageAsync(_page.Id, _page);\n            }\n            \n            NavigationManager.NavigateTo("/admin/pages");\n        }\n        catch (Exception ex)\n        {\n            await JSRuntime.InvokeVoidAsync("alert", $"Failed to save page: {ex.Message}");\n        }\n        finally\n        {\n            _isSaving = false;\n        }\n    }\n    \n    private void NavigateBack()\n    {\n        NavigationManager.NavigateTo("/admin/pages");\n    }\n    \n    private string MakeUrlFriendly(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n            return "";\n            \n        // Remove accents\n        text = new string(text\n            .Normalize(System.Text.NormalizationForm.FormD)\n            .Where(c => System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c) != System.Globalization.UnicodeCategory.NonSpacingMark)\n            .ToArray());\n            \n        // Convert to lowercase\n        text = text.ToLowerInvariant();\n        \n        // Replace spaces with hyphens\n        text = System.Text.RegularExpressions.Regex.Replace(text, @"\\s+", "-");\n        \n        // Remove invalid characters\n        text = System.Text.RegularExpressions.Regex.Replace(text, @"[^a-z0-9\\-]", "");\n        \n        // Remove duplicate hyphens\n        text = System.Text.RegularExpressions.Regex.Replace(text, @"-+", "-");\n        \n        // Trim hyphens from start and end\n        text = text.Trim(\'-\');\n        \n        return text;\n    }\n}\n</create-file>\n</function_calls>'}